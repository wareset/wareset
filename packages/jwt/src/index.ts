import { btoa, atob, hashFactory, stringify } from './lib'
export { btoa, atob, hashFactory }

export const utf82b64 = (str: string): string => btoa(str)
  .replace(/\+/g, '-').replace(/\//g, '_').replace(/[=]+$/g, '')

const __fix__ = (n: number): string =>
  n === 3 ? '===' : n === 2 ? '==' : n === 1 ? '=' : ''
export const b642utf8 = (str: string): string => atob(
  str.replace(/-/g, '+').replace(/_/g, '/') + __fix__(4 - str.length % 4)
)

// https://ru.wikipedia.org/wiki/JSON_Web_Token
/*
Заголовок
В заголовке указывается необходимая информация для описания самого токена.

Обязательный ключ здесь только один:

alg: алгоритм, используемый для подписи/шифрования (в случае неподписанного JWT используется значение «none»).

Необязательные ключи:

typ: тип токена (type). Используется в случае, когда токены смешиваются с другими объектами, имеющими JOSE заголовки. Должно иметь значение «JWT».
cty: тип содержимого (content type). Если в токене помимо зарегистрированных служебных ключей есть пользовательские, то данный ключ не должен присутствовать. В противном случае должно иметь значение «JWT»[2]
Полезная нагрузка
В данной секции указывается пользовательская информация (например, имя пользователя и уровень его доступа), а также могут быть использованы некоторые служебные ключи. Все они являются необязательными:

iss: чувствительная к регистру строка или URI, которая является уникальным идентификатором стороны, генерирующей токен (issuer).
sub: чувствительная к регистру строка или URI, которая является уникальным идентификатором стороны, о которой содержится информация в данном токене (subject). Значения с этим ключом должны быть уникальны в контексте стороны, генерирующей JWT.
aud: массив чувствительных к регистру строк или URI, являющийся списком получателей данного токена. Когда принимающая сторона получает JWT с данным ключом, она должна проверить наличие себя в получателях — иначе проигнорировать токен (audience).
exp: время в формате Unix Time, определяющее момент, когда токен станет невалидным (expiration).
nbf: в противоположность ключу exp, это время в формате Unix Time, определяющее момент, когда токен станет валидным (not before).
jti: строка, определяющая уникальный идентификатор данного токена (JWT ID).[3]
iat: время в формате Unix Time, определяющее момент, когда токен был создан. iat и nbf могут не совпадать, например, если токен был создан раньше, чем время, когда он должен стать валидным (issued at).
*/

export const createJWT = (
  signatureFn: (s: string) => string,
  password: string,
  payload: { [key:string]: any } = {},
  header: { [key:string]: string } = {},
): string => {
  const HEADER = stringify({ alg: 'HS256', typ: 'JWT', ...header })
  const res = `${utf82b64(HEADER)}.${utf82b64(stringify(payload))}`
  const VERIFY = utf82b64(signatureFn(res + password))
  return res + '.' + VERIFY
}

// import { createJWT, hashFactory } from '@wareset/jwt'
// const hasher = hashFactory(3, 358)
// console.log(createJWT(hasher, '1', { id: '1' }))
